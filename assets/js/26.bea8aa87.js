(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{502:function(t,a,s){t.exports=s.p+"assets/img/xkcd-tsp.a004bc14.png"},614:function(t,a,s){"use strict";s.r(a);var n=s(35),i=Object(n.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("figure",[n("img",{staticClass:"no-zoom",attrs:{src:s(502),alt:"xkcd: Traveling Salesman Problem",title:"xkcd: Traveling Salesman Problem"}})]),t._v(" "),n("h1",{attrs:{id:"组合优化-combinatorial-optimization"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#组合优化-combinatorial-optimization"}},[t._v("#")]),t._v(" 组合优化 (Combinatorial optimization)")]),t._v(" "),n("link",{attrs:{rel:"stylesheet",href:"/notes/katex.min.css"}}),t._v(" "),n("p",[t._v("简单来说，"),n("mark",[t._v("组合优化")]),t._v("是指从一个"),n("strong",[t._v("有限集合")]),t._v("中寻找"),n("strong",[t._v("最优组合")]),t._v("（或"),n("strong",[t._v("排列")]),t._v("）的问题（属于离散优化问题），比如")]),t._v(" "),n("div",{staticClass:"custom-block definition"},[n("p",{staticClass:"title"},[t._v("背包问题 (Knapsack problem)")]),n("p",[t._v("给定一组物品，每种物品都有其对应的重量和价格"),n("span",{staticClass:"nowrap"},[n("span",{staticClass:"cn-font",attrs:{lang:"zh-CN"}},[t._v("——")]),t._v("基础集，ground set")]),n("br"),t._v("\n在限定的总重量内　　　　　　　　　　　　　　"),n("span",{staticClass:"nowrap"},[n("span",{staticClass:"cn-font",attrs:{lang:"zh-CN"}},[t._v("——")]),t._v("约束条件")]),n("br"),t._v("\n如何选择一组物品使得总价值最高　　　　　　　"),n("span",{staticClass:"nowrap"},[n("span",{staticClass:"cn-font",attrs:{lang:"zh-CN"}},[t._v("——")]),t._v("优化目标")])])]),n("div",{staticClass:"custom-block definition"},[n("p",{staticClass:"title"},[t._v("旅行商问题 (Traveling Salesman Problem, TSP)")]),n("p",[t._v("给定一系列城市（以及两两之间的距离）"),n("br"),t._v("\n希望访问所有城市恰好一次并返回起点城市"),n("br"),t._v("\n找到满足条件的最短回路")])]),n("div",{staticClass:"custom-block definition"},[n("p",{staticClass:"title"},[t._v("车辆路径问题 (Vehicle Routing Problem, VRP) "),n("span",{staticClass:"cn-font",attrs:{lang:"zh-CN"}},[t._v("——")]),t._v("送快递")]),n("p",[t._v("给定一个仓库和一系列客户的位置"),n("br"),t._v("\n从仓库出发经过所有客户的位置（期间可以返回仓库）"),n("br"),t._v("\n车辆（车队）的最短路线是什么"),n("br"),t._v("\n其中还需考虑约束条件：车辆的载重量有限")])]),n("p",[t._v("组合优化问题的难点在于"),n("span",{staticClass:"cn-font",attrs:{lang:"zh-CN"}},[t._v("——")]),t._v("随着问题规模增长，其可行解的数量呈指数增长，一般都是 "),n("strong",[t._v("NP-hard")])]),t._v(" "),n("p",[t._v("以 TSP 为例")]),t._v(" "),n("h2",{attrs:{id:"精确求解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#精确求解"}},[t._v("#")]),t._v(" 精确求解")]),t._v(" "),n("p",[t._v("既然是 "),n("strong",[t._v("NP-hard")]),t._v(" 问题，那就不存在多项式时间的解法，只能在暴力搜索 "),n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[n("semantics",[n("mrow",[n("mi",[t._v("O")]),n("mo",{attrs:{stretchy:"false"}},[t._v("(")]),n("mi",[t._v("n")]),n("mo",{attrs:{stretchy:"false"}},[t._v("!")]),n("mo",{attrs:{stretchy:"false"}},[t._v(")")])],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("O(n!)")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),n("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.02778em"}},[t._v("O")]),n("span",{staticClass:"mopen"},[t._v("(")]),n("span",{staticClass:"mord mathnormal"},[t._v("n")]),n("span",{staticClass:"mclose"},[t._v("!)")])])])]),t._v(" 的基础上尽量不那么暴力")]),t._v(" "),n("h3",{attrs:{id:"分支定界-branch-and-bound"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#分支定界-branch-and-bound"}},[t._v("#")]),t._v(" 分支定界 (branch and bound)")]),t._v(" "),n("p",[t._v("搜索树 + 剪枝（"),n("a",{attrs:{href:"./minimax.html#alpha-beta-剪枝",target:"_blank",rel:"noopener noreferrer"}},[t._v("alpha-beta 剪枝")]),t._v("就是分支定界法的一个特例）")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://www.math.uwaterloo.ca/tsp/concorde.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Concorde TSP solver"),n("OutboundLink")],1),n("br"),t._v("\ncutting plane algorithm + branch and bound")]),t._v(" "),n("h3",{attrs:{id:"动态规划-dynamic-programming"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#动态规划-dynamic-programming"}},[t._v("#")]),t._v(" 动态规划 (dynamic programming)")]),t._v(" "),n("p",[n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[n("semantics",[n("mrow",[n("mi",[t._v("O")]),n("mo",{attrs:{stretchy:"false"}},[t._v("(")]),n("msup",[n("mn",[t._v("2")]),n("mi",[t._v("n")])],1),n("msup",[n("mi",[t._v("n")]),n("mn",[t._v("2")])],1),n("mo",{attrs:{stretchy:"false"}},[t._v(")")])],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("O(2^n n^2)")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"1.0641em","vertical-align":"-0.25em"}}),n("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.02778em"}},[t._v("O")]),n("span",{staticClass:"mopen"},[t._v("(")]),n("span",{staticClass:"mord"},[n("span",{staticClass:"mord"},[t._v("2")]),n("span",{staticClass:"msupsub"},[n("span",{staticClass:"vlist-t"},[n("span",{staticClass:"vlist-r"},[n("span",{staticClass:"vlist",staticStyle:{height:"0.6644em"}},[n("span",{staticStyle:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{staticClass:"pstrut",staticStyle:{height:"2.7em"}}),n("span",{staticClass:"sizing reset-size6 size3 mtight"},[n("span",{staticClass:"mord mathnormal mtight"},[t._v("n")])])])])])])])]),n("span",{staticClass:"mord"},[n("span",{staticClass:"mord mathnormal"},[t._v("n")]),n("span",{staticClass:"msupsub"},[n("span",{staticClass:"vlist-t"},[n("span",{staticClass:"vlist-r"},[n("span",{staticClass:"vlist",staticStyle:{height:"0.8141em"}},[n("span",{staticStyle:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{staticClass:"pstrut",staticStyle:{height:"2.7em"}}),n("span",{staticClass:"sizing reset-size6 size3 mtight"},[n("span",{staticClass:"mord mtight"},[t._v("2")])])])])])])])]),n("span",{staticClass:"mclose"},[t._v(")")])])])])]),t._v(" "),n("h2",{attrs:{id:"近似求解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#近似求解"}},[t._v("#")]),t._v(" 近似求解")]),t._v(" "),n("p",[t._v("LKH, Lin-Kernighan heuristic for k-opt moves")]),t._v(" "),n("p",[t._v("GA-EAX evolutionary algorithm")]),t._v(" "),n("h3",{attrs:{id:"近似算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#近似算法"}},[t._v("#")]),t._v(" 近似算法")]),t._v(" "),n("p",[t._v("比如贪心算法、局部搜索、线性规划等")]),t._v(" "),n("p",[t._v("解的质量有保证")]),t._v(" "),n("h3",{attrs:{id:"启发式算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#启发式算法"}},[t._v("#")]),t._v(" 启发式算法")]),t._v(" "),n("p",[t._v("比如模拟退火、演化算法、粒子群算法等")]),t._v(" "),n("p",[t._v("可以在给定时间内找到较好的解")]),t._v(" "),n("h3",{attrs:{id:"深度学习"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#深度学习"}},[t._v("#")]),t._v(" 深度学习")]),t._v(" "),n("p",[t._v("监督学习：在固定的问题规模（城市数量）下效果较好，但在大规模情况下训练不实际"),n("br"),t._v("\n强化学习：能泛化使用到不同问题规模")]),t._v(" "),n("p",[t._v("代表工作")]),t._v(" "),n("ul",[n("li",[t._v("Oriol Vinyals et al. “Pointer Networks”. "),n("em",[t._v("NeurIPS")]),t._v(". 2015.")]),t._v(" "),n("li",[t._v("Irwan Bello et al. “Neural Combinatorial Optimization with Reinforcement Learning”. "),n("em",[t._v("ICLR workshop")]),t._v(". 2017.")]),t._v(" "),n("li",[t._v("Wouter Kool et al. “Attention, Learn to Solve Routing Problems!” "),n("em",[t._v("ICLR")]),t._v(". 2019.")])]),t._v(" "),n("p",[t._v("其它")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://youtu.be/q8nQTNvCrjE",target:"_blank",rel:"noopener noreferrer"}},[t._v("Information, Computation, Optimization: Connecting the Dots in the Traveling Salesman Problem"),n("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=i.exports}}]);